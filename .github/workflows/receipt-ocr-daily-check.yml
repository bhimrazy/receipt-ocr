name: Receipt OCR Daily Check
on:
  # push:
  #   branches: [main]
  #   paths:
  #     - "src/receipt_ocr/**"
  pull_request:
    branches: [main]
    paths:
      - "src/receipt_ocr/**"
  schedule:
    - cron: "0 0 * * *" # Runs every day at midnight UTC
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      OPENAI_BASE_URL: ${{ secrets.OPENAI_BASE_URL }}
      OPENAI_MODEL: ${{ secrets.OPENAI_MODEL }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          persist-credentials: true

      - name: Install uv and set Python version
        uses: astral-sh/setup-uv@v7
        with:
          activate-environment: true
          python-version: "3.12"
          enable-cache: true

      - name: Install receipt-ocr
        run: uv pip install receipt-ocr

      - name: Test CLI usage
        run: |
          output=$(receipt-ocr images/receipt.jpg)
          echo "$output"
          # Basic validation: check if output contains expected fields
          if echo "$output" | grep -q "merchant_name"; then
            echo "CLI test passed: structured data extracted"
          else
            echo "CLI test failed: no structured data found"
            exit 1
          fi

      - name: Test programmatic usage
        run: |
          python3 << 'EOF'
          from receipt_ocr.processors import ReceiptProcessor
          from receipt_ocr.providers import OpenAIProvider
          import os
          import json

          provider = OpenAIProvider(
              api_key=os.getenv('OPENAI_API_KEY'),
              base_url=os.getenv('OPENAI_BASE_URL')
          )
          processor = ReceiptProcessor(provider)

          # Casual schema for json_object and text formats
          json_schema = {
              'merchant_name': 'string',
              'merchant_address': 'string',
              'transaction_date': 'string',
              'transaction_time': 'string',
              'total_amount': 'number',
              'line_items': [
                  {
                      'item_name': 'string',
                      'item_quantity': 'number',
                      'item_price': 'number',
                  }
              ],
          }

          # Proper JSON Schema for json_schema format
          json_schema_openai = {
              "type": "object",
              "properties": {
                  "merchant_name": {"type": "string"},
                  "merchant_address": {"type": "string"},
                  "transaction_date": {"type": "string"},
                  "transaction_time": {"type": "string"},
                  "total_amount": {"type": "number"},
                  "line_items": {
                      "type": "array",
                      "items": {
                          "type": "object",
                          "properties": {
                              "item_name": {"type": "string"},
                              "item_quantity": {"type": "number"},
                              "item_price": {"type": "number"}
                          },
                          "required": ["item_name", "item_quantity", "item_price"],
                          "additionalProperties": False
                      }
                  }
              },
              "required": [
                  "merchant_name",
                  "merchant_address",
                  "transaction_date",
                  "transaction_time",
                  "total_amount",
                  "line_items"
              ],
              "additionalProperties": False
          }

          # Test all response format types
          results = {}
          results['json_object'] = processor.process_receipt('images/receipt.jpg', json_schema, os.getenv('OPENAI_MODEL'), response_format_type="json_object")
          results['json_schema'] = processor.process_receipt('images/receipt.jpg', json_schema_openai, os.getenv('OPENAI_MODEL'), response_format_type="json_schema")
          results['text'] = processor.process_receipt('images/receipt.jpg', json_schema, os.getenv('OPENAI_MODEL'), response_format_type="text")

          # Validate all results
          all_passed = True
          for format_type, result in results.items():
              if result and isinstance(result, dict) and 'merchant_name' in result:
                  print(f"{format_type.upper()} test passed: structured data extracted")
              else:
                  print(f"{format_type.upper()} test failed: invalid or missing structured data")
                  all_passed = False

          if all_passed:
              print("All programmatic tests passed")
          else:
              print("Some programmatic tests failed")
              exit(1)
          EOF

      - name: Minimize uv cache
        run: uv cache prune --ci
