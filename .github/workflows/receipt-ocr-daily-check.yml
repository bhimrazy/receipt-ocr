name: Receipt OCR Daily Check
on:
  push:
    branches: [main]
    paths:
      - 'src/receipt_ocr/**'
  pull_request:
    branches: [main]
    paths:
      - 'src/receipt_ocr/**'
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * *" # Runs every day at midnight UTC
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      OPENAI_BASE_URL: ${{ secrets.OPENAI_BASE_URL }}
      OPENAI_MODEL: ${{ secrets.OPENAI_MODEL }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          persist-credentials: true

      - name: Install uv and set Python version
        uses: astral-sh/setup-uv@v7
        with:
          activate-environment: true
          python-version: "3.12"
          enable-cache: true

      - name: Install receipt-ocr
        run: uv pip install receipt-ocr

      - name: Test CLI usage
        run: |
          output=$(receipt-ocr images/receipt.jpg)
          echo "$output"
          # Basic validation: check if output contains expected fields
          if echo "$output" | grep -q "merchant_name"; then
            echo "CLI test passed: structured data extracted"
          else
            echo "CLI test failed: no structured data found"
            exit 1
          fi

      - name: Test programmatic usage
        run: |
          python3 << 'EOF'
          from receipt_ocr.processors import ReceiptProcessor
          from receipt_ocr.providers import OpenAIProvider
          import os
          import json

          provider = OpenAIProvider(
              api_key=os.getenv('OPENAI_API_KEY'),
              base_url=os.getenv('OPENAI_BASE_URL')
          )
          processor = ReceiptProcessor(provider)

          json_schema = {
              'merchant_name': 'string',
              'merchant_address': 'string',
              'transaction_date': 'string',
              'transaction_time': 'string',
              'total_amount': 'number',
              'line_items': [
                  {
                      'item_name': 'string',
                      'item_quantity': 'number',
                      'item_price': 'number',
                  }
              ],
          }

          result = processor.process_receipt('images/receipt.jpg', json_schema, os.getenv('OPENAI_MODEL'))

          if result and isinstance(result, dict) and 'merchant_name' in result:
              print("Programmatic test passed: structured data extracted")
              print(f"Sample result: {json.dumps(result, indent=2)}...")
          else:
              print("Programmatic test failed: invalid or missing structured data")
              exit(1)
          EOF
